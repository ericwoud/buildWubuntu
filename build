#!/bin/bash

### apt install libncurses-dev

mainline="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.14.13"
kernellocalversion="-wrt0" # Is added to kernelversion by make for name of modules dir.
release="xenial"           # Ubuntu version
extrapackages=",vim,dbus,screen"  # Extra packages installed in rootfs, comma separated list
wubuntu="WUBUNTU"          # Label usb-disk for installation
mbrid="abcdefba"           # Change usb mbr id (partuuid) to this value when options are -uU 
lc="en_US.UTF-8"           # Locale
timezone="Europe/Paris"    # Timezone
keyboard="us"              # Keyboard
rootpwd="admin"            # Root password

function finish {
  echo Running exit function to clean up...
  if [ "$u" = true ] ; then
    $sudo umount $rootfsdir
    $sudo rm -rf $rootfsdir
  fi
}

exec > >(tee -i build.log)
exec 2> >(tee -i build-error.log)

# INIT VARIABLES
[ $USER = "root" ] && sudo="" || sudo="sudo"
[[ $# == 0 ]] && args="-rktua"|| args=$@
echo "build "$args
cd $(dirname $0)
while getopts ":rktuaRKTU" opt $args; do declare "${opt}=true" ; done
trap finish EXIT
$sudo true
shopt -s extglob
if [ -z $(cat /proc/cpuinfo | grep Hardware.*Armada.*380/385) ]; then
  echo "Not running on Armada CPU"
  makej="-j4"
  if [ "$u" = true ] && [ ! -z $(blkid -L $wubuntu) ]; then
    rootfsdir=/media/$wubuntu
    $sudo umount $(blkid -L $wubuntu)
    if [ "$U" = true ] ; then
      dev=/dev/$(lsblk -no pkname $(blkid -L $wubuntu))
      getid=$(echo $($sudo dd if=$dev bs=1 count=4 skip=440 2>/dev/null | od -t x4 -An))
      if [[ $(lsblk -no partuuid $dev) = *$getid* ]]; then
        echo "Are you sure you want to write "$mbrid" to MBR ID at "$dev" ???" 
        read -p "Type <yes> to confirm: " prompt; 
        if [[ $prompt == "yes" ]]; then
          echo -en "\x${mbrid:6:2}\x${mbrid:4:2}\x${mbrid:2:2}\x${mbrid:0:2}" | \
            $sudo dd of=$dev bs=1 count=4 seek=440
        fi
      else
        echo "Error reading MBR ID, not going to write MBR ID! (Maybe GPT?)"
        exit
      fi
    fi
    $sudo mkdir $rootfsdir
    $sudo mount --source LABEL=$wubuntu $rootfsdir -o exec,dev
  else
    rootfsdir="rootfs-"$release ; u=""
  fi
else
  echo "Running on Armada CPU"
  makej="-j1" # make with one core on WRT to try not overheating cpu
  rootfsdir="" ; r="" ; R="" ; u=""
fi

kernelversion=$(basename $mainline)
schroot="$sudo LC_ALL=C LANGUAGE=C LANG=C chroot $rootfsdir"
kerneldir=$rootfsdir/usr/src/linux-headers-$kernelversion
echo INSTALLDIR: $rootfsdir
echo OPTIONS: rootfs=$r kernel=$k tar=$t usb=$u apt=$a 
if [ "$K" = true ] ; then
  echo Removing kernelsource...
  $sudo rm -rf $kerneldir
fi
if [ "$R" = true ] ; then
  echo Removing rootfs...
  $sudo rm -rf $rootfsdir
fi
if [ "$T" = true ] ; then
  echo Removing .tar...
  rm -f rootfs-$release.tar.bz2 kernel-$kernelversion.tar.gz modules-$kernelversion$kernellocalversion.tar.gz
fi
if [ "$a" = true ]; then
  if [ -z $rootfsdir ]; then
    $sudo apt-get install --yes wget git build-essential bc ca-certificates gcc-arm-none-eabi # install these when running on WRT
  else
    if ! grep -q "^deb .*jacob/virtualisation" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
      $sudo add-apt-repository --yes ppa:jacob/virtualisation
      $sudo apt-get update  
    fi
    $sudo apt-get install --yes debootstrap qemu-user-static git build-essential u-boot-tools gcc-arm-none-eabi
  fi
fi

### ROOTFS ###
if [ "$r" = true ]; then
  [ ! -z $rootfsdir ] && echo $sudo mkdir $rootfsdir
  if [ ! -d "$rootfsdir/sbin" ]; then
    if [ ! -f "rootfs-$release.tar.bz2" ]; then
      $sudo debootstrap --arch=armhf --foreign --no-check-gpg --components=main,restricted,universe,multiverse \
        --include="locales,hostapd,bridge-utils,ifupdown,u-boot-tools,mtd-utils,build-essential,openssh-server$extrapackages" \
        $release $rootfsdir "http://ports.ubuntu.com/ubuntu-ports"
      $sudo cp /usr/bin/qemu-arm-static $rootfsdir/usr/bin/
      $schroot /debootstrap/debootstrap --second-stage
      if [ "$t" = true ]; then
        echo "Creating rootfs.tar..."
        $sudo tar -cjf rootfs-$release.tar.bz2 -C $rootfsdir .
        $sudo chown -R $USER:$USER rootfs-$release.tar.bz2
      fi
    else
      echo "Extracting rootfs.tar..."
      $sudo tar -xjf rootfs-$release.tar.bz2 -C $rootfsdir
    fi
  fi
#  $schroot locale-gen $lc
  $schroot update-locale LANGUAGE=$lc LC_ALL=$lc LANG=$lc
  #LC_PAPER=$lc LC_ADDRESS=$lc LC_MONETARY=$lc LC_NUMERIC=$lc LC_TELEPHONE=$lc LC_IDENTIFICATION=$lc LC_MEASUREMENT=$lc LC_TIME=$lc LC_NAME=$lc
  $schroot ln -sf /usr/share/zoneinfo/${timezone} /etc/localtime
  $schroot sed -i 's/XKBLAYOUT=\"us\"/XKBLAYOUT=\"${keyboard}\"/g' /etc/default/keyboard
  echo root:$rootpwd | $schroot chpasswd 
  $sudo cp -r --remove-destination -v custom/rootfs-$release/. $rootfsdir
  for nr in $rootfsdir/bash.* ; do source $nr                                             ; $sudo rm -rf $nr ; done
  for nr in $rootfsdir/patch.*; do echo $nr ; $sudo patch -d $rootfsdir -p1 -N -r - < $nr ; $sudo rm -rf $nr ; done
  find "custom/rootfs-$release/etc/systemd/system" -name "*.service"| while read service ; do
    $schroot systemctl reenable $(basename $service) # enable all custom services
  done
  $sudo mkdir -p $rootfsdir/root/buildWubuntu
  $sudo cp -rfv custom $rootfsdir/root/buildWubuntu/custom
  $sudo cp -fv build $rootfsdir/root/buildWubuntu/build
  $schroot make --directory=/root/buildWubuntu/custom/tools clean default
  if [ "$k" != true ] && [ -f "modules-$kernelversion$kernellocalversion.tar.gz" ]; then
    echo "Not compiling kernel, adding modules and firmware from .tar..."
    $sudo tar -xzf modules-$kernelversion$kernellocalversion.tar.gz -C $rootfsdir
  fi
fi

### KERNEL ###
if [ "$k" = true ] ; then
  $sudo mkdir $rootfsdir
  if [ ! -d "$kerneldir" ]; then
    if [ ! -f "kernel-$kernelversion.tar.gz" ]; then
      sources=$(wget -nv -qO- $mainline/SOURCES) ; readarray -t sources <<<"$sources"
      kernelgit=(${sources[0]})
      echo "GIT CLONE" $kernelversion "=" ${kernelgit[1]} "SHOULD BE COMMIT:" ${kernelgit[2]}
      $sudo git clone --branch $kernelversion --depth 1 ${kernelgit[0]} $kerneldir
      src=1
      while [ $src -lt ${#sources[@]} ]; do
        wget -nv -O /dev/stdout $mainline"/"${sources[$src]} | $sudo patch -d $kerneldir -p1
        let src++
      done
      if [ "$t" = true ]; then
        echo "Creating kernel.tar..."
        tar -czf kernel-$kernelversion.tar.gz -C $kerneldir .
      fi
    else
      $sudo mkdir -p $kerneldir
      echo "Extracting kernel.tar..."
      $sudo tar -xzf kernel-$kernelversion.tar.gz -C $kerneldir
    fi
  fi
  makeoptions="--directory="$kerneldir" LOCALVERSION="$kernellocalversion" DEFAULT_HOSTNAME=WUBUNTUTEST ARCH=arm CROSS_COMPILE=arm-none-eabi-"
  $sudo mkdir -p $rootfsdir/lib/firmware/wrt
  $sudo cp -r --remove-destination -v custom/kernel-$kernelversion/. $kerneldir
  $sudo cp -r --remove-destination -v custom/rootfs-$release/lib/firmware/. $rootfsdir/lib/firmware/
  for nr in $kerneldir/bash.* ; do source $nr                                             ; $sudo rm -rf $nr ; done
  for nr in $kerneldir/patch.*; do echo $nr ; $sudo patch -d $kerneldir -p1 -N -r - < $nr ; $sudo rm -rf $nr ; done
  #$sudo make $makeoptions menuconfig
  yes n | $sudo make $makeoptions oldconfig   # only add config entries added in patch.diff or bash.script, new entries enter n
#  $sudo make $makeoptions oldnoconfig   # only add config entries added in patch.diff or bash.script, new entries enter n
  diff -Naur custom/kernel-$kernelversion/.config $kerneldir/.config >config-changes.diff
  $sudo make $makeoptions $makej modules
  #$sudo make $makeoptions headers_install INSTALL_HDR_PATH="../../../usr"
  $sudo make $makeoptions modules_install INSTALL_MOD_PATH="../../.."
  kernelrelease=$($sudo make -s $makeoptions kernelrelease)
  $sudo depmod -ab $rootfsdir/. $kernelrelease
  $sudo make $makeoptions $makej zImage
  for model in rango shelby # caiman cobra 
  do
    $sudo make $makeoptions $makej armada-385-linksys-$model.dtb
    cp --remove-destination -v $kerneldir/arch/arm/boot/zImage zImageDtb-$model
    cat $kerneldir/arch/arm/boot/dts/armada-385-linksys-$model.dtb >> zImageDtb-$model
    mkimage -A arm -O linux -T kernel -C none -a 0x200000 -e 0x200000 -n linux -d zImageDtb-$model uImageDtb-$model.bin
    rm -f zImageDtb-$model
    $sudo cp --remove-destination -v uImageDtb-$model.bin $rootfsdir/lib/firmware/wrt/uImageDtb-$model.bin # default location for firmware_write
    $sudo cp --remove-destination -v uImageDtb-$model.bin $rootfsdir/lib/firmware/wrt/uImageDtb-$model-$kernelversion$kernellocalversion.bin
  done
  if [ "$t" = true ]; then
    echo "Creating modules.tar..."
    tar -czf modules-$kernelversion$kernellocalversion.tar.gz -C $rootfsdir/. ./lib/modules/$kernelrelease ./lib/firmware
  fi
  
fi

exit

